// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 12.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SqlConvert.Template
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;
    using System.Threading.Tasks;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class TSQL : TSQLBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("   \r\n");
            this.Write("using Microsoft.Practices.EnterpriseLibrary.Data;\r\nusing SH3H.SDK.DataAccess.Db;\r" +
                    "\nusing SH3H.SDK.Infrastructure.Logging;\r\nusing SH3H.SDK.Share;\r\nusing SH3H.WAP.");
            
            #line 13 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelSpaceName));
            
            #line default
            #line hidden
            this.Write(".Model;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nus" +
                    "ing SH3H.SharpFrame.Data;\r\nusing SH3H.SDK.Definition.Exceptions;\r\nusing SH3H.");
            
            #line 19 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ShareNamespace));
            
            #line default
            #line hidden
            this.Write(".Share;\r\n\t\t\t \r\nnamespace ");
            
            #line 21 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// 定义模型SqlServer数据库访问对象\r\n    /// </summary>\r\n\tpublic" +
                    " class ");
            
            #line 26 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Storage : BaseAccess<");
            
            #line 26 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(">, I");
            
            #line 26 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Storage\r\n    {\r\n        /// <summary>\r\n        /// 构造函数\r\n        /// </summary>\r\n" +
                    "        public ");
            
            #line 31 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(@"Storage()
            : base(SH3H.SDK.Share.Consts.CONFIGURE_DATABASE_CONNECTION_STRING) { }

        /// <summary>
        /// 新增模型
        /// </summary>
        /// <param name=""entity"">模型实体</param>
        /// <returns>模型实体</returns>
        public ");
            
            #line 39 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" Create");
            
            #line 39 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 39 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" entity)\r\n        {\r\n            try\r\n            {\r\n                string sqlTe" +
                    "xt = @\" INSERT INTO ");
            
            #line 43 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 44 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < OtherColumns.Count; i++)
				{
					var column = OtherColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t");
            
            #line 47 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            
            #line 47 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((i==OtherColumns.Count-1)?"":","));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 48 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t) \r\n                                    VALUES(\r\n");
            
            #line 50 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < OtherColumns.Count; i++)
				{
					var column = OtherColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t@");
            
            #line 53 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            
            #line 53 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((i==OtherColumns.Count-1)?"":","));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 54 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t)\r\n                                SELECT @@IDENTITY;\";\r\n                usi" +
                    "ng (var cmd = Database.GetSqlStringCommand(sqlText))\r\n                {\r\n");
            
            #line 58 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < OtherColumns.Count; i++)
				{
					var column = OtherColumns[i];
					if(column.CSharpName.Contains("CreateTime")){

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t Database.AddInParameter(cmd, \"@");
            
            #line 62 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", DbType.");
            
            #line 62 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.SQLType));
            
            #line default
            #line hidden
            this.Write(", DateTime.Now); \r\n");
            
            #line 63 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
					}
					else{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t Database.AddInParameter(cmd, \"@");
            
            #line 65 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", DbType.");
            
            #line 65 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.SQLType));
            
            #line default
            #line hidden
            this.Write(", entity.");
            
            #line 65 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write("); \r\n");
            
            #line 66 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
					}
				}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\r\n                    int id = ExecuteScalar<int>(cmd);\r\n");
            
            #line 69 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tentity.");
            
            #line 72 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write(" = id;\r\n");
            
            #line 73 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				}
            
            #line default
            #line hidden
            this.Write(@"                    return entity;
                }
            }
            catch (Exception ex)
            {
                LogManager.Get().Throw(ex);
                throw new WapException(StateCode.CODE_SQL_EXECUTE_ERROR, ""新增模型失败"");
            }
        }

        /// <summary>
        /// 修改模型
        /// </summary>
        /// <param name=""id"">模型id</param>
        /// <param name=""entity"">模型实体</param>
        /// <returns>模型实体</returns>
        public ");
            
            #line 90 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" Update");
            
            #line 90 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("ById(\r\n");
            
            #line 91 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 94 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 94 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 95 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t ");
            
            #line 96 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" entity)\r\n        {\r\n            try\r\n            {\r\n                string sqlTe" +
                    "xt = @\" UPDATE ");
            
            #line 100 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" \r\n                      SET \r\n");
            
            #line 102 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < OtherColumns.Count; i++)
				{	 
					var column = OtherColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t  ");
            
            #line 105 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("=@");
            
            #line 105 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            
            #line 105 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((i==OtherColumns.Count-1)?"":","));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 106 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				}
            
            #line default
            #line hidden
            this.Write("                          WHERE 1=1\r\n");
            
            #line 108 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t     And ");
            
            #line 111 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("=@");
            
            #line 111 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 112 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				}
            
            #line default
            #line hidden
            this.Write("\";\r\n                using (var cmd = Database.GetSqlStringCommand(sqlText))\r\n    " +
                    "            {\r\n");
            
            #line 115 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < Columns.Count; i++)
				{
					var column = Columns[i];
					if(column.CSharpName.Contains("UpdateTime")){

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tDatabase.AddInParameter(cmd, \"@");
            
            #line 119 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", DbType.");
            
            #line 119 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.SQLType));
            
            #line default
            #line hidden
            this.Write(", DateTime.Now); \r\n");
            
            #line 120 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
					}
					else{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tDatabase.AddInParameter(cmd, \"@");
            
            #line 122 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", DbType.");
            
            #line 122 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.SQLType));
            
            #line default
            #line hidden
            this.Write(", entity.");
            
            #line 122 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write("); \r\n");
            
            #line 123 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
					}
				}
            
            #line default
            #line hidden
            this.Write(@"                    ExecuteNonQuery(cmd);
                    return entity;
                }
            }
            catch (Exception ex)
            {
                LogManager.Get().Throw(ex);
                throw new WapException(StateCode.CODE_SQL_EXECUTE_ERROR, ""修改模型失败"");
            }
        }

        /// <summary>
        /// 删除模型
        /// </summary>
        /// <param name=""id"">模型id</param>
        /// <returns>是否删除成功</returns>
        public bool Delete");
            
            #line 141 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 142 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 145 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 145 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            
            #line 145 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((i==PkColumns.Count-1)?"":","));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 146 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				}
            
            #line default
            #line hidden
            this.Write("\t\t)\r\n        {\r\n            try\r\n            {\r\n                string sqlText = " +
                    "@\"DELETE FROM ");
            
            #line 151 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t\t\t\t\t\t   WHERE 1=1\r\n");
            
            #line 153 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];
					

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\tAnd\t");
            
            #line 157 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("=@");
            
            #line 157 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 158 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
					
				}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\";\r\n                using (var cmd = Database.GetSqlStringCommand(sqlText))\r\n" +
                    "                {\r\n");
            
            #line 163 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tDatabase.AddInParameter(cmd, \"@");
            
            #line 166 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", DbType.");
            
            #line 166 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.SQLType));
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 166 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName.ToLower()));
            
            #line default
            #line hidden
            this.Write("); \r\n");
            
            #line 167 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				}
            
            #line default
            #line hidden
            this.Write(@"                    ExecuteNonQuery(cmd);
                    return true;
                }
            }
            catch (Exception ex)
            {
                LogManager.Get().Throw(ex);
                throw new WapException(StateCode.CODE_SQL_EXECUTE_ERROR, ""删除模型失败"");
            }
        }

        /// <summary>
        /// 获取所有模型
        /// </summary>
        /// <returns>所有模型集合</returns>
        public IEnumerable<");
            
            #line 183 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("> Get");
            
            #line 183 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("All()\r\n        {\r\n            try\r\n            {\r\n                string sqlText " +
                    "= @\"SELECT * FROM ");
            
            #line 187 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(@""";
                using (var cmd = Database.GetSqlStringCommand(sqlText))
                {
                    var result = SelectList(cmd);
                    return result;
                }
            }
            catch (Exception ex)
            {
                LogManager.Get().Throw(ex);
                throw new WapException(StateCode.CODE_SQL_EXECUTE_ERROR, ""获取所有模型失败"");
            }
        }

        /// <summary>
        /// 获取指定模型
        /// </summary>
        /// <param name=""id"">模型id</param>
        /// <returns>模型实体</returns>
        public ");
            
            #line 206 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" Get");
            
            #line 206 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("ById(\r\n");
            
            #line 207 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 210 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 210 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            
            #line 210 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((i==PkColumns.Count-1)?"":","));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 211 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				}
            
            #line default
            #line hidden
            this.Write("\t\t)\r\n        {\r\n            try\r\n            {\r\n                string sqlText = " +
                    "@\"SELECT * \r\n\t\t\t\t\t\t\t\t   FROM ");
            
            #line 217 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TableName));
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t\t\t\t\t\t   WHERE 1=1\r\n");
            
            #line 219 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];
					

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\tAnd\t");
            
            #line 223 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("=@");
            
            #line 223 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 224 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
					
				}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\";\r\n                using (var cmd = Database.GetSqlStringCommand(sqlText))\r\n" +
                    "                {\r\n");
            
            #line 229 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tDatabase.AddInParameter(cmd, \"@");
            
            #line 232 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", DbType.");
            
            #line 232 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.SQLType));
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 232 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName.ToLower()));
            
            #line default
            #line hidden
            this.Write("); \r\n");
            
            #line 233 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				}
            
            #line default
            #line hidden
            this.Write(@"                    return SelectSingle(cmd);
                }
            }
            catch (Exception ex)
            {
                LogManager.Get().Throw(ex);
                throw new WapException(StateCode.CODE_SQL_EXECUTE_ERROR, ""获取指定模型失败"");
            }
        }



        /// <summary>
        /// 根据<see cref=""IDataReader""/>数据读取器构建对象实体
        /// </summary>
        /// <param name=""reader"">数据读取器</param>
        /// <param name=""instance"">模型实例</param>
        /// <returns>如果构建对象成功返回对象实例，否则异常</returns>
        public override ");
            
            #line 252 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" Build(IDataReader reader, ");
            
            #line 252 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" instance)\r\n        {\r\n            try\r\n            {\r\n");
            
            #line 256 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
				for (int i = 0; i < Columns.Count; i++)
				{
					var column = Columns[i];
					if(!column.Null){

            
            #line default
            #line hidden
            this.Write("\t\t\t\tinstance.");
            
            #line 260 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write(" = reader.GetReaderValue<");
            
            #line 260 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpType));
            
            #line default
            #line hidden
            this.Write(">(\"");
            
            #line 260 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("\"); \r\n");
            
            #line 261 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
					}
					else{

            
            #line default
            #line hidden
            this.Write("\t\t\t\tinstance.");
            
            #line 263 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write(" = reader.GetReaderValue<");
            
            #line 263 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpType));
            
            #line default
            #line hidden
            this.Write(">(\"");
            
            #line 263 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.ColumnName));
            
            #line default
            #line hidden
            this.Write("\", default(");
            
            #line 263 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpType));
            
            #line default
            #line hidden
            this.Write("), true); \r\n");
            
            #line 264 "D:\Project\SqlConvert\SqlConvert\Template\TSQL.tt"
					}
				}
            
            #line default
            #line hidden
            this.Write(@"
                return instance;
            }
            catch (Exception ex)
            {
                LogManager.Get().Throw(ex);
                throw new WapException(StateCode.CODE_MODEL_CONVERT_ERROR, ""模型模型转换失败"");
            }
        }
    }
}
");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class TSQLBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
