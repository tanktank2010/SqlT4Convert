// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 12.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SqlConvert.Template
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;
    using System.Threading.Tasks;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class TService : TServiceBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("   \r\n");
            this.Write("using SH3H.WAP.");
            
            #line 9 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelSpaceName));
            
            #line default
            #line hidden
            this.Write(".Model.Dto;\r\nusing SH3H.WAP.");
            
            #line 10 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelSpaceName));
            
            #line default
            #line hidden
            this.Write(".Model;\t   \r\nusing SH3H.WAP.");
            
            #line 11 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelSpaceName));
            
            #line default
            #line hidden
            this.Write(".Contracts;\r\nusing SH3H.WAP.");
            
            #line 12 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelSpaceName));
            
            #line default
            #line hidden
            this.Write(".DataAccess.Repo.Contracts;\r\nusing SH3H.SDK.Service.Core;\r\nusing SH3H.SDK.Definit" +
                    "ion.Exceptions;\r\nusing SH3H.");
            
            #line 15 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ShareNamespace));
            
            #line default
            #line hidden
            this.Write(".Share;\t\r\nusing System.Collections.Generic;\t\t\r\nusing System.Linq;\r\n\t\r\nnamespace ");
            
            #line 19 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// 定义模型接口\r\n    /// </summary>\r\n    public class ");
            
            #line 24 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("ServiceImpl : BaseService, I");
            
            #line 24 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Service\r\n    {\r\n\t\tprivate I");
            
            #line 26 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Repository _");
            
            #line 26 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonName));
            
            #line default
            #line hidden
            this.Write("Repository;\r\n\r\n\t\tpublic ");
            
            #line 28 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("ServiceImpl(I");
            
            #line 28 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Repository ");
            
            #line 28 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonName));
            
            #line default
            #line hidden
            this.Write("Repository)\r\n        {\r\n            _");
            
            #line 30 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonName));
            
            #line default
            #line hidden
            this.Write("Repository = ");
            
            #line 30 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonName));
            
            #line default
            #line hidden
            this.Write("Repository;\r\n        }\r\n\r\n\r\n\t\t/// <summary>\r\n        /// 新增模型\r\n        /// </summ" +
                    "ary>\r\n        /// <param name=\"entity\">要增加的模型实体对象</param>\r\n        /// <returns>" +
                    "增加的模型实体对象</returns>\r\n       public ");
            
            #line 39 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Dto Create");
            
            #line 39 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 39 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Dto entity){\r\n            if (entity == null)\r\n                throw new WapExcep" +
                    "tion(StateCode.CODE_ARGUMENT_NULL, \"模型为空！\");\r\n\r\n            var result = _");
            
            #line 43 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonName));
            
            #line default
            #line hidden
            this.Write("Repository.Create");
            
            #line 43 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(entity.ToModel());\r\n            return ");
            
            #line 44 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Dto.FromModel(result);\r\n\t   }\r\n\r\n        /// <summary>\r\n        /// 修改模型\r\n       " +
                    " /// </summary>\r\n        /// <param name=\"id\">模型编号</param>\r\n        /// <param n" +
                    "ame=\"entity\">要修改的模型实体对象</param>\r\n        /// <returns>修改后的模型实体对象</returns>\r\n    " +
                    "    public  ");
            
            #line 53 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Dto Update");
            
            #line 53 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("ById(\r\n");
            
            #line 54 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 57 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 57 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 58 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				}
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t\t");
            
            #line 59 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Dto entity\r\n\t\t){\r\n");
            
            #line 61 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];
					if(column.CSharpType=="int"){
					

            
            #line default
            #line hidden
            this.Write("\t\t\t\tif (");
            
            #line 66 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            this.Write(" <= 0)\r\n\t\t\t\t\tthrow new WapException(StateCode.CODE_ARGUMENT_LIMIT_ERROR, \"模型");
            
            #line 67 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write("小于零！\");\r\n");
            
            #line 68 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
					}
					if(column.CSharpType=="string"){
					

            
            #line default
            #line hidden
            this.Write("\t\t\t\tif (String.IsNullOrEmpty(");
            
            #line 71 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            this.Write("))\r\n\t\t\t\t\tthrow new WapException(StateCode.CODE_ARGUMENT_LIMIT_ERROR, \"模型");
            
            #line 72 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write("不能为空！\");\r\n");
            
            #line 73 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
					}
				}
            
            #line default
            #line hidden
            this.Write(" \r\n            if (entity == null)\r\n                throw new WapException(StateC" +
                    "ode.CODE_ARGUMENT_NULL, \"模型为空！\");\r\n\r\n            var result = _");
            
            #line 78 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonName));
            
            #line default
            #line hidden
            this.Write("Repository.Update");
            
            #line 78 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("ById(\r\n");
            
            #line 79 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t");
            
            #line 82 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 83 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				}
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t\t\t\t\t\tentity.ToModel()\r\n\t\t\t\t\t\t);\r\n            return ");
            
            #line 86 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Dto.FromModel(result);\r\n\t   }\r\n\r\n        /// <summary>\r\n        /// 删除模型\r\n       " +
                    " /// </summary>\r\n        /// <param name=\"id\">模型编号</param>\r\n        /// <returns" +
                    ">是否删除成功</returns>\r\n        public  bool Delete");
            
            #line 94 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 95 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 98 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 98 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            
            #line 98 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((i==PkColumns.Count-1)?"":","));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 99 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				}
            
            #line default
            #line hidden
            this.Write("\t\t){\r\n");
            
            #line 101 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];
					if(column.CSharpType=="int"){
					

            
            #line default
            #line hidden
            this.Write("\t\t\t\tif (");
            
            #line 106 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            this.Write(" <= 0)\r\n\t\t\t\t\tthrow new WapException(StateCode.CODE_ARGUMENT_LIMIT_ERROR, \"模型");
            
            #line 107 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write("小于零！\");\r\n");
            
            #line 108 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
					}
					if(column.CSharpType=="string"){
					

            
            #line default
            #line hidden
            this.Write("\t\t\t\tif (String.IsNullOrEmpty(");
            
            #line 111 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            this.Write("))\r\n\t\t\t\t\tthrow new WapException(StateCode.CODE_ARGUMENT_LIMIT_ERROR, \"模型");
            
            #line 112 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write("不能为空！\");\r\n");
            
            #line 113 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
					}
				}
            
            #line default
            #line hidden
            this.Write(" \r\n\r\n            var result = _");
            
            #line 116 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonName));
            
            #line default
            #line hidden
            this.Write("Repository.Delete");
            
            #line 116 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 117 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 120 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            
            #line 120 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((i==PkColumns.Count-1)?"":","));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 121 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				}
            
            #line default
            #line hidden
            this.Write("\t\t\t);\r\n            return result;\r\n\t   }\r\n\r\n        /// <summary>\r\n        /// 获取" +
                    "所有模型\r\n        /// </summary>\r\n        /// <returns>所有公告板对象集合</returns>\r\n        " +
                    "public IEnumerable<");
            
            #line 130 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Dto> Get");
            
            #line 130 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("All(){\r\n            var result = _");
            
            #line 131 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonName));
            
            #line default
            #line hidden
            this.Write("Repository.Get");
            
            #line 131 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("All();\r\n            return result.Select(b => ");
            
            #line 132 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Dto.FromModel(b)).ToList();\r\n\t\t}\r\n\r\n        /// <summary>\r\n        /// 获取指定模型\r\n  " +
                    "      /// </summary>\r\n        /// <param name=\"id\">模型编号</param>\r\n        /// <re" +
                    "turns>模型</returns>\r\n        public ");
            
            #line 140 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Dto Get");
            
            #line 140 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("ById(\r\n");
            
            #line 141 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 144 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 144 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            
            #line 144 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((i==PkColumns.Count-1)?"":","));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 145 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				}
            
            #line default
            #line hidden
            this.Write("\t\t){\r\n");
            
            #line 147 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];
					if(column.CSharpType=="int"){
					

            
            #line default
            #line hidden
            this.Write("\t\t\t\tif (");
            
            #line 152 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            this.Write(" <= 0)\r\n\t\t\t\t\tthrow new WapException(StateCode.CODE_ARGUMENT_LIMIT_ERROR, \"模型");
            
            #line 153 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write("小于零！\");\r\n");
            
            #line 154 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
					}
					if(column.CSharpType=="string"){
					

            
            #line default
            #line hidden
            this.Write("\t\t\t\tif (String.IsNullOrEmpty(");
            
            #line 157 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            this.Write("))\r\n\t\t\t\t\tthrow new WapException(StateCode.CODE_ARGUMENT_LIMIT_ERROR, \"模型");
            
            #line 158 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName));
            
            #line default
            #line hidden
            this.Write("不能为空！\");\r\n");
            
            #line 159 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
					}
				}
            
            #line default
            #line hidden
            this.Write(" \r\n\r\n\t\t\t\tvar result = _");
            
            #line 162 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(JsonName));
            
            #line default
            #line hidden
            this.Write("Repository.Get");
            
            #line 162 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("ById(\r\n");
            
            #line 163 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				for (int i = 0; i < PkColumns.Count; i++)
				{
					var column = PkColumns[i];

            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 166 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.CSharpName.ToLower()));
            
            #line default
            #line hidden
            
            #line 166 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((i==PkColumns.Count-1)?"":","));
            
            #line default
            #line hidden
            this.Write(" \r\n");
            
            #line 167 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
				}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t);\r\n\t\t\t\treturn ");
            
            #line 169 "D:\Project\SqlConvert\SqlConvert\Template\TService.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("Dto.FromModel(result);\r\n\t\t}\r\n\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class TServiceBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
